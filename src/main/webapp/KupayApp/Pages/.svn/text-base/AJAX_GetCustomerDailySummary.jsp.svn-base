<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ include file="imports.jsp"%>
<%@ include file="SessionCheck.jsp"%>
<%
	String strContent = "";
	String strUserID = request.getParameter("the_user_id");
	if (strUserID == null || strUserID.isEmpty())
	{
		response.setContentType("text/plain");
		response.getWriter().println("");
		return;
	}

	String strTheDay = request.getParameter("the_day");
	SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat dtf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date theDate = dt.parse(strTheDay);
	Calendar cal = Calendar.getInstance();
	cal.setTime(theDate);
	
	String durationBegin = dt.format(cal.getTime());
	String durationEnd = durationBegin;
	
	durationBegin += " 00:00:00";
	durationEnd += " 23:59:59";
	
	int nCustomer_ID = 0;
	float fCustomerBalance = 0f;
	SessionFactory sessionFactory = HibernateUtil.getSessionFactory(strCountryCode);	
	Session theSession = null;

	try
	{
		theSession = sessionFactory.getCurrentSession();
		theSession.beginTransaction();
		String strQuery2 = "from TCustomerUsers where User_Login_ID = '" + request.getRemoteUser() + "'";
		Query query2 = theSession.createQuery(strQuery2);
		List customer = query2.list();
		if (customer.size() > 0)
		{
			TCustomerUsers custUsers = (TCustomerUsers) customer.get(0);
			TMasterCustomerinfo theCustomer = custUsers.getTMasterCustomerinfo();
			TMasterUsers theUser = custUsers.getTMasterUsers();
			if (theCustomer.getActiveStatus() == 1 && theUser.getUserActiveStatus() == 1)
			{
				nCustomer_ID = theCustomer.getCustomerId();
				fCustomerBalance = theCustomer.getCustomerBalance();
			}
		}
		
		if (nCustomer_ID == 0)
		{
			theSession.getTransaction().commit();
			response.setContentType("text/plain");
			response.getWriter().println("");
			return;	
		}	
	
		boolean bFromHistory = false;
		String specificUser = "";
		if (strUserID.compareToIgnoreCase("All") != 0)
			specificUser = "'" + strUserID + "'";
		
		String strQuery = "call SP_Customer_Daily_Summary(" + nCustomer_ID + 
							", '" + durationBegin + "', '" +  durationEnd + "', " +
							specificUser + ")";
		
		SQLQuery sqlQuery = theSession.createSQLQuery(strQuery);
		sqlQuery.addScalar("IsHistory", Hibernate.INTEGER);
		sqlQuery.addScalar("Transaction_ID", Hibernate.LONG);
		sqlQuery.addScalar("Transaction_Time", Hibernate.TIMESTAMP);
		sqlQuery.addScalar("Balance_Before", Hibernate.FLOAT);
		sqlQuery.addScalar("Balance_After", Hibernate.FLOAT);
		sqlQuery.addScalar("Product_ID", Hibernate.INTEGER);
		sqlQuery.addScalar("Product_Name", Hibernate.STRING);
		sqlQuery.addScalar("Quantity", Hibernate.INTEGER);
		sqlQuery.addScalar("Batch_ID", Hibernate.INTEGER);
		sqlQuery.addScalar("Probable_Sale_Price", Hibernate.FLOAT);
		sqlQuery.addScalar("Transaction_Amount", Hibernate.FLOAT);
		sqlQuery.addScalar("Second_Amount", Hibernate.FLOAT);
		sqlQuery.addScalar("commit_status", Hibernate.INTEGER);
		sqlQuery.addScalar("face_value", Hibernate.FLOAT);
		sqlQuery.addScalar("Group_Amount", Hibernate.FLOAT);

		List custTransactions = sqlQuery.list();
		
		// summary variables
		
		int nTotalCommittedTransactions = 0;
		int nTotalCards = 0;
		Float fTotalRetailPriceValue = 0.0f;
		Float fTotalTransactionAmount = 0.0f;
		Float fTotalCommissionAmount = 0.0f;
		int nTotalRevokedTransactions = 0;

		DecimalFormat twoPointsAfterDecimal = new DecimalFormat("0.00");
		
		String strResponse = "<table border=1 width=\"100%\">";
		strResponse += "<tr><td>Transaction Number</td><td>Transaction Time</td><td>Balance Before Transaction</td>";
		strResponse += "<td>Balance After Transaction</td><td>Product Name</td><td>Quantity</td>";
		strResponse += "<td>Retail Price</td><td>Transaction Price</td>";
		strResponse += "<td>Commission</td><td>Transaction Status</td></tr>";
		
		Long nPrevTransactionID = 0L;
		for (int i = 0; i < custTransactions.size(); i++)
		{
			Object [] theRecord = (Object []) custTransactions.get(i);
			if (theRecord.length <= 0) continue;
			
			Long nTransactionID = (Long) theRecord[1];
			Date dtTransaction = (Date) theRecord[2];
			Float fBalanceBefore = (Float) theRecord[3];
			Float fBalanceAfter = (Float) theRecord[4];
			Integer nProductID = (Integer) theRecord[5];
			String  strProductName = (String) theRecord[6];
			Integer nQuantity = (Integer) theRecord[7];
			Integer nBatchID = (Integer) theRecord[8];
			Float fProbableSalePrice = (Float) theRecord[9];
			Float fTransactionPrice = (Float) theRecord[10];
			Float fSecondTransactionAmount = (Float) theRecord[11];
			Integer nCommited = (Integer) theRecord[12];
			Float fFaceValue = (Float) theRecord[13];
			String strCommitStatus = "Committed";
			
			fProbableSalePrice = fProbableSalePrice * nQuantity;
			Float fCommission = fProbableSalePrice - fTransactionPrice;
			
			switch(nCommited)
			{
				case 0: strCommitStatus = "Cancelled"; break;
				case 2: strCommitStatus = "Pending"; break;
				case 1:
				{
					strCommitStatus = "Committed";
					nTotalCards += nQuantity;
					fTotalTransactionAmount += fTransactionPrice;
					fTotalRetailPriceValue += fProbableSalePrice;
					fTotalCommissionAmount += fCommission;
					break;
				}				
				case 3: 
				{
					strCommitStatus = "Revoked";
					nTotalRevokedTransactions++;
					break;
				}
			}

			strResponse += "<tr>";
			if (nPrevTransactionID.longValue() != nTransactionID.longValue())
			{
				if (nCommited == 1)
					nTotalCommittedTransactions++;

				nPrevTransactionID = nTransactionID;
				strResponse += "<td>" + nTransactionID + "</td>";
				strResponse += "<td>" + dtf.format(dtTransaction) + "</td>";
				strResponse += "<td>" + twoPointsAfterDecimal.format((double)fBalanceBefore) + "</td>";
				strResponse += "<td>" + twoPointsAfterDecimal.format((double)fBalanceAfter) + "</td>";
			}
			else
				strResponse += "<td colspan=4> </td>";
				
			strResponse += "<td>" + strProductName + "-" + twoPointsAfterDecimal.format((double)fFaceValue) + "</td>";
			strResponse += "<td>" + nQuantity + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fProbableSalePrice) + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fTransactionPrice) + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fCommission) + "</td>";
			strResponse += "<td>" + strCommitStatus + "</td>";
			strResponse += "</tr>";
		}
		
		// Mobile topup transctions
		
		int nTotalMobileTopups = 0;
		int nMobleToupTotalRevokedTransactions = 0;		
		
		strQuery = "call SP_Customer_Daily_AIT_Summary(" + nCustomer_ID + 
				", '" + durationBegin + "', '" +  durationEnd + "', " +
				specificUser + ")";
		
		sqlQuery = theSession.createSQLQuery(strQuery);
		sqlQuery.addScalar("IsHistory", Hibernate.INTEGER);
		sqlQuery.addScalar("Transaction_ID", Hibernate.LONG);
		sqlQuery.addScalar("Transaction_Time", Hibernate.TIMESTAMP);
		sqlQuery.addScalar("Balance_Before", Hibernate.FLOAT);
		sqlQuery.addScalar("Balance_After", Hibernate.FLOAT);
		sqlQuery.addScalar("Probable_Sale_Price", Hibernate.FLOAT);
		sqlQuery.addScalar("Transaction_Amount", Hibernate.FLOAT);
		sqlQuery.addScalar("commit_status", Hibernate.INTEGER);
		sqlQuery.addScalar("Agent_Amount", Hibernate.FLOAT);
		sqlQuery.addScalar("Group_Amount", Hibernate.FLOAT);
		
		custTransactions = sqlQuery.list();
		
		nPrevTransactionID = 0L;
		for (int i = 0; i < custTransactions.size(); i++)
		{
			Object [] theRecord = (Object []) custTransactions.get(i);
			if (theRecord.length <= 0) continue;
			
			String  strProductName = "Mobile Topup";
			Integer nQuantity = 1;			
			
			Long nTransactionID = (Long) theRecord[1];
			Date dtTransaction = (Date) theRecord[2];
			Float fBalanceBefore = (Float) theRecord[3];
			Float fBalanceAfter = (Float) theRecord[4];

			Float fProbableSalePrice = (Float) theRecord[5];
			Float fTransactionPrice = (Float) theRecord[6];
			Integer nCommited = (Integer) theRecord[7];
			String strCommitStatus = "Committed";
			
			Float fCommission = fProbableSalePrice - fTransactionPrice;
			
			switch(nCommited)
			{
				case 0: strCommitStatus = "Cancelled"; break;
				case 2: strCommitStatus = "Pending"; break;
				case 1:
				{
					strCommitStatus = "Committed";
					nTotalMobileTopups += nQuantity;
					fTotalTransactionAmount += fTransactionPrice;
					fTotalRetailPriceValue += fProbableSalePrice;
					fTotalCommissionAmount += fCommission;
					break;
				}				
				case 3: 
				{
					strCommitStatus = "Revoked";
					nMobleToupTotalRevokedTransactions++;
					break;
				}
			}

			strResponse += "<tr bgcolor=\"yellow\">";
			if (nPrevTransactionID.longValue() != nTransactionID.longValue())
			{
				if (nCommited == 1)
					nTotalCommittedTransactions++;

				nPrevTransactionID = nTransactionID;
				strResponse += "<td>" + nTransactionID + "</td>";
				strResponse += "<td>" + dtf.format(dtTransaction) + "</td>";
				strResponse += "<td>" + twoPointsAfterDecimal.format((double)fBalanceBefore) + "</td>";
				strResponse += "<td>" + twoPointsAfterDecimal.format((double)fBalanceAfter) + "</td>";
			}
			else
				strResponse += "<td colspan=4> </td>";

			strResponse += "<td>" + strProductName + "</td>";
			strResponse += "<td>" + nQuantity + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fProbableSalePrice) + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fTransactionPrice) + "</td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fCommission) + "</td>";
			strResponse += "<td>" + strCommitStatus + "</td>";
			strResponse += "</tr>";
		}
		
		// SIM transctions

		int nTotalSIMTransactions = 0;
		
		strQuery = "call SP_Customer_Daily_SIM_Summary(" + nCustomer_ID + 
				", '" + durationBegin + "', '" +  durationEnd + "', " +
				specificUser + ")";

		sqlQuery = theSession.createSQLQuery(strQuery);
		sqlQuery.addScalar("IsHistory", Hibernate.INTEGER);
		sqlQuery.addScalar("Transaction_ID", Hibernate.LONG);
		sqlQuery.addScalar("Transaction_Time", Hibernate.TIMESTAMP);
		sqlQuery.addScalar("total_topups", Hibernate.INTEGER);
		sqlQuery.addScalar("Customer_Commission", Hibernate.FLOAT);
		sqlQuery.addScalar("Agent_Commission", Hibernate.FLOAT);
		sqlQuery.addScalar("Group_Commission", Hibernate.FLOAT);
		sqlQuery.addScalar("Sim_Sequence_ID", Hibernate.INTEGER);
		sqlQuery.addScalar("Product_Name", Hibernate.STRING);
		
		custTransactions = sqlQuery.list();
		int nTotalSimTrans = custTransactions.size();
		
		if (nTotalSimTrans <= 0)
		{
			strResponse += "<tr><td><div id=\"nav\"><a href=" + ksContext + "/Pages/ShowProducts.jsp> Show Products </a></div></td></tr>";
			strResponse += "</table>";
		}
		
		
		for (int i = 0; i < nTotalSimTrans; i++)
		{
			Object [] theRecord = (Object []) custTransactions.get(i);
			if (theRecord.length <= 0) continue;
			
			String  strProductName = "SIM Transaction";
			Integer nQuantity = 1;			
			
			Long nTransactionID = (Long) theRecord[1];
			Date dtTransaction = (Date) theRecord[2];
			Integer nTopups = (Integer) theRecord[3];
			Float fCommission = (Float) theRecord[4];
			strProductName = (String) theRecord[8];

			strResponse += "<tr bgcolor=\"#C0C0C0\">";
			nTotalCommittedTransactions++;
			fTotalCommissionAmount += fCommission;

			strResponse += "<td>" + nTransactionID + "</td>";
			strResponse += "<td>" + dtf.format(dtTransaction) + "</td>";
			strResponse += "<td> </td><td> </td>";
			strResponse += "<td>" + strProductName + "</td>";
			strResponse += "<td>" + nQuantity + "</td>";
			strResponse += "<td> </td><td> </td>";
			strResponse += "<td>" + twoPointsAfterDecimal.format((double)fCommission) + "</td>";
			strResponse += "<td>" + nTopups + " Topups </td>";
			strResponse += "</tr>";
		}

		if (nTotalSimTrans > 0)
		{
			strResponse += "<tr><td><div id=\"nav\"><a href=" + ksContext + "/Pages/ShowProducts.jsp> Show Products </a></div></td></tr>";
			strResponse += "</table>";
		}		

		String strFirstPortion = "<table border=1 width=\"100%\">";
		strFirstPortion += "<tr>";
		strFirstPortion += "<td><font color=\"red\">Customer Balance</font></td>";
		strFirstPortion += "<td><font color=\"green\">Total Committed Transactions</font></td>";
		strFirstPortion += "<td><font color=\"green\">Total Quantity</font></td>";
		strFirstPortion += "<td><font color=\"green\">Total Retail Value</font></td>";
		strFirstPortion += "<td><font color=\"green\">Total Transaction Amount</font></td>";
		strFirstPortion += "<td><font color=\"blue\">Total Commission</font></td>";
		strFirstPortion += "<td><font color=\"red\">Total Revoked Sub Transactions</font></td>";
		strFirstPortion += "</tr>";

		int nTotalQuantity = nTotalCards + nTotalMobileTopups + nTotalSimTrans;
		int nTotalRevoked = nTotalRevokedTransactions + nMobleToupTotalRevokedTransactions;

		strFirstPortion += "<tr>";
		strFirstPortion += "<td><font color=red>" + twoPointsAfterDecimal.format((double)fCustomerBalance) + "</font></td>";
		strFirstPortion += "<td><font color=\"green\">" + nTotalCommittedTransactions + "</font></td>";
		strFirstPortion += "<td><font color=\"green\">" + nTotalCards + " + " + nTotalMobileTopups;
		if (nTotalSimTrans > 0)
			strFirstPortion += " + " + nTotalSimTrans + " = " + nTotalQuantity + "</font></td>";
		else
			strFirstPortion += " = " + nTotalQuantity + "</font></td>";

		strFirstPortion += "<td><font color=\"green\">" + twoPointsAfterDecimal.format((double)fTotalRetailPriceValue) + "</font></td>";	
		strFirstPortion += "<td><font color=\"green\">" + twoPointsAfterDecimal.format((double)fTotalTransactionAmount) + "</font></td>";
		strFirstPortion += "<td><font color=\"blue\"><b>" + twoPointsAfterDecimal.format((double)fTotalCommissionAmount) + "</b></font></td>";
		strFirstPortion += "<td><font color=\"red\">" + nTotalRevokedTransactions + " + " + nMobleToupTotalRevokedTransactions + " = " + nTotalRevoked  + "</font></td>";	
		strFirstPortion += "</tr>";

		strFirstPortion += "</table><br><br>";
		
		strFirstPortion += strResponse;	
		theSession.getTransaction().commit();
		response.getWriter().println(strFirstPortion);
	}
	catch(Exception e)
	{
		theSession.getTransaction().rollback();
		//e.printStackTrace();
		response.getWriter().println("");
	}	

%>